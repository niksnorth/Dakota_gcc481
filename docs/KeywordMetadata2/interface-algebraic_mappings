Blurb::
Use AMPL to define algebraic input-output mappings 

Description::
Dakota can evaluate algebraic input-output mappings using AMPL 
\cite Fou03.  The mappings are expressed in 3 files: \c stub.nl, \c
stub.col, and \c stub.row, where \c stub is a particular root name
describing a particular problem. The file names are communicated to
%Dakota using the \c algebraic_mappings keyword. It may either specify
the full \c stub.nl filename, or alternatively, just the \c stub
basename.

%Dakota then extracts the input and output identifier strings from \c
stub.col and \c stub.row and employs the AMPL solver library \cite Gay97
to process the directed acyclic graphc (DAG) specification in \c
stub.nl. The variable and objective function names declared within
AMPL should be a subset of the variable and response descriptors
specified in the \ref variables and \ref responses blocks. Ordering is
not important, as %Dakota will reorder data as needed.

Topics::

Examples::
An interface employing both algebraic and simulation-based mappings.
The results from the individual algebraic and simulation mappings are
overlaid based on the variable and response descriptors used by the
individual mappings.

\verbatim
interface,
	algebraic_mappings = 'ampl/fma.nl'
	fork
	  analysis_driver = 'text_book'
	  parameters_file = 'tb.in'
	  results_file    = 'tb.out'
\endverbatim

Theory::
Faq::
See_Also::	
