# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget conmin ncsuopt nidr amplsolver optpp dfftpack lhs_mod lhs_mods lhs sparsegrid pecos_src pecos approxnn surfpack_interpreter surfpack surfpack_fortran 3po tinyxml utilib colin pebbl scolib interfaces ddace dream fsudace fsu_halton_standalone fsu_hammersley_standalone fsu_cvt_standalone fsu_latinize_standalone fsu_quality_standalone hopspack moga soga utilities jega_fe eutils jega cport nomad psuade dakota_sciplot dakota_src_fortran dakota_src)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target conmin
add_library(conmin SHARED IMPORTED)

# Create imported target ncsuopt
add_library(ncsuopt SHARED IMPORTED)

# Create imported target nidr
add_library(nidr SHARED IMPORTED)

# Create imported target amplsolver
add_library(amplsolver SHARED IMPORTED)

# Create imported target optpp
add_library(optpp SHARED IMPORTED)

# Create imported target dfftpack
add_library(dfftpack SHARED IMPORTED)

# Create imported target lhs_mod
add_library(lhs_mod SHARED IMPORTED)

# Create imported target lhs_mods
add_library(lhs_mods SHARED IMPORTED)

# Create imported target lhs
add_library(lhs SHARED IMPORTED)

# Create imported target sparsegrid
add_library(sparsegrid SHARED IMPORTED)

# Create imported target pecos_src
add_library(pecos_src SHARED IMPORTED)

# Create imported target pecos
add_library(pecos SHARED IMPORTED)

# Create imported target approxnn
add_library(approxnn SHARED IMPORTED)

# Create imported target surfpack_interpreter
add_library(surfpack_interpreter SHARED IMPORTED)

# Create imported target surfpack
add_library(surfpack SHARED IMPORTED)

# Create imported target surfpack_fortran
add_library(surfpack_fortran SHARED IMPORTED)

# Create imported target 3po
add_library(3po SHARED IMPORTED)

# Create imported target tinyxml
add_library(tinyxml SHARED IMPORTED)

set_target_properties(tinyxml PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target utilib
add_library(utilib SHARED IMPORTED)

set_target_properties(utilib PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target colin
add_library(colin SHARED IMPORTED)

# Create imported target pebbl
add_library(pebbl SHARED IMPORTED)

# Create imported target scolib
add_library(scolib SHARED IMPORTED)

# Create imported target interfaces
add_library(interfaces SHARED IMPORTED)

# Create imported target ddace
add_library(ddace SHARED IMPORTED)

# Create imported target dream
add_library(dream SHARED IMPORTED)

# Create imported target fsudace
add_library(fsudace SHARED IMPORTED)

# Create imported target fsu_halton_standalone
add_executable(fsu_halton_standalone IMPORTED)

# Create imported target fsu_hammersley_standalone
add_executable(fsu_hammersley_standalone IMPORTED)

# Create imported target fsu_cvt_standalone
add_executable(fsu_cvt_standalone IMPORTED)

# Create imported target fsu_latinize_standalone
add_executable(fsu_latinize_standalone IMPORTED)

# Create imported target fsu_quality_standalone
add_executable(fsu_quality_standalone IMPORTED)

# Create imported target hopspack
add_library(hopspack SHARED IMPORTED)

# Create imported target moga
add_library(moga SHARED IMPORTED)

# Create imported target soga
add_library(soga SHARED IMPORTED)

# Create imported target utilities
add_library(utilities SHARED IMPORTED)

# Create imported target jega_fe
add_library(jega_fe SHARED IMPORTED)

# Create imported target eutils
add_library(eutils SHARED IMPORTED)

# Create imported target jega
add_library(jega SHARED IMPORTED)

# Create imported target cport
add_library(cport SHARED IMPORTED)

# Create imported target nomad
add_library(nomad SHARED IMPORTED)

# Create imported target psuade
add_library(psuade SHARED IMPORTED)

# Create imported target dakota_sciplot
add_library(dakota_sciplot SHARED IMPORTED)

# Create imported target dakota_src_fortran
add_library(dakota_src_fortran SHARED IMPORTED)

# Create imported target dakota_src
add_library(dakota_src SHARED IMPORTED)

set_target_properties(dakota_src PROPERTIES
  INTERFACE_LINK_LIBRARIES "dakota_src_fortran;utilib;colin;interfaces;scolib"
)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/DakotaTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
